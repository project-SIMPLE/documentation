"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[194],{1405:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>h});var n=i(4848),a=i(8453);const o={},r="Step 2: Creation of the Unity basic game",s={id:"Tutorials/Tutorial-\u2010-Step-2",title:"Step 2: Creation of the Unity basic game",description:"Creation and setting of the project",source:"@site/docs/Tutorials/Tutorial-\u2010-Step-2.md",sourceDirName:"Tutorials",slug:"/Tutorials/Tutorial-\u2010-Step-2",permalink:"/Tutorials/Tutorial-\u2010-Step-2",draft:!1,unlisted:!1,editUrl:"https://github.com/project-SIMPLE/documentation/tree/main/docs/Tutorials/Tutorial-\u2010-Step-2.md",tags:[],version:"current",frontMatter:{},sidebar:"docSidebar",previous:{title:"Step 1: Generation of the GAMA VR model",permalink:"/Tutorials/Tutorial-\u2010-Step-1"},next:{title:"Step 3: Adding Interactions",permalink:"/Tutorials/Tutorial-\u2010-Step-3"}},l={},h=[{value:"Creation and setting of the project",id:"creation-and-setting-of-the-project",level:2},{value:"Player agent settings",id:"player-agent-settings",level:2},{value:"Game manager settings",id:"game-manager-settings",level:2},{value:"Debug Overlay",id:"debug-overlay",level:2},{value:"GodViewPlayer",id:"godviewplayer",level:2},{value:"Test of the model",id:"test-of-the-model",level:2},{value:"Without the headset (debug mode) and Without the middleware",id:"without-the-headset-debug-mode-and-without-the-middleware",level:3},{value:"With the headset and Without the middleware",id:"with-the-headset-and-without-the-middleware",level:3}];function d(e){const t={a:"a",h1:"h1",h2:"h2",h3:"h3",p:"p",...(0,a.RP)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"step-2-creation-of-the-unity-basic-game",children:"Step 2: Creation of the Unity basic game"}),"\n",(0,n.jsx)(t.h2,{id:"creation-and-setting-of-the-project",children:"Creation and setting of the project"}),"\n",(0,n.jsxs)(t.p,{children:["To start the creation of the Unity game, a first step consists in cloning or just downloading the ",(0,n.jsx)(t.a,{href:"https://github.com/project-SIMPLE/simple.template.unity/tree/2024-06",children:"Simple template Unity, branch 2024-06"})," and add it in the Unity Hub. You can then open it."]}),"\n",(0,n.jsx)("img",{src:"https://github.com/project-SIMPLE/simple.template.unity/blob/2024-06/ReadmeRes/download.png?raw=true",alt:"Download",width:"800"}),"\n",(0,n.jsx)(t.p,{children:'This project includes 3 important scenes (Assets/Scenes folder): The "Start Up" menu, which is the scene launched at the start of the game; the "IP Menu", which lets you configure the IP of the computer running GAMA or the middleware; and the "Main Scene" in the Demo folder. In this tutorial, we will only modify the Main scene (be sure to open this scene from Assets/Scenes/Demo Scenes/Main Scene).'}),"\n",(0,n.jsx)("img",{src:"https://github.com/project-SIMPLE/simple.template.unity/blob/2024-06/ReadmeRes/TutorialScene.png?raw=true",alt:"TutorialScene",width:"1000"}),"\n",(0,n.jsx)(t.h2,{id:"player-agent-settings",children:"Player agent settings"}),"\n",(0,n.jsx)(t.p,{children:'By default, the \u201cMain Scene\u201d includes an FPS player. This type of player is subject to gravity and moves at ground level, considering geometries with a collider as obstacles. In our case, we prefer to have a \u201cdecision maker\u201d view from the sky. We will remove the FPS player (right-click it and then delete). In Assets/Resources/Prefabs/GAMA Link/Player, drag and drop the "GodViewPlayer" into the scene.'}),"\n",(0,n.jsx)("img",{src:"https://github.com/project-SIMPLE/simple.template.unity/blob/2024-06/ReadmeRes/TutorialPlayer.png?raw=true",alt:"TutorialPlayer",width:"1000"}),"\n",(0,n.jsx)(t.h2,{id:"game-manager-settings",children:"Game manager settings"}),"\n",(0,n.jsx)(t.p,{children:'In the main scene, inspect the \u201cGame Manager\u201d in \u201cManagers\u201d. In the Simulation Manager, drag and drop the GodViewPlayer game object from the Main Scene to "Player". In this tutorial, we want to use the same coordinate in GAMA and Unity, we thus set GAMA CRS Coeff X, Y to 1.0; GAMA CRS Offset X,Y,Z to 0.0.'}),"\n",(0,n.jsx)("img",{src:"https://github.com/project-SIMPLE/simple.template.unity/blob/2024-06/ReadmeRes/TutorialGameManager.png?raw=true",alt:"TutorialGameManager",width:"1000"}),"\n",(0,n.jsx)(t.p,{children:'An important point to note concerns the tags used in the model, particularly those sent with the geometries: these must have already been defined in the Unity project. To define a new tag, just inspect any game object in the scene, then in "Tag", select "Add Tag". Then click on the "+" at the end of the tag list and define the new tag.'}),"\n",(0,n.jsx)("img",{src:"https://github.com/project-SIMPLE/simple.template.unity/blob/2024-06/ReadmeRes/TutorialAddTag1.png?raw=true",alt:"TutorialAddTag1",width:"1000"}),"\n",(0,n.jsx)("img",{src:"https://github.com/project-SIMPLE/simple.template.unity/blob/2024-06/ReadmeRes/TutorialAddTag2.png?raw=true",alt:"TutorialAddTag2",width:"1000"}),"\n",(0,n.jsx)(t.p,{children:'In this tutorial, we will just add a new tag called "road" for the road agents.'}),"\n",(0,n.jsx)("img",{src:"https://github.com/project-SIMPLE/simple.template.unity/blob/2024-06/ReadmeRes/TutorialAddTagRoad.png?raw=true",alt:"TutorialAddTagRoad",width:"1000"}),"\n",(0,n.jsx)(t.h2,{id:"debug-overlay",children:"Debug Overlay"}),"\n",(0,n.jsx)(t.p,{children:'By default, the main scene includes a game object called "Debug Overlay", which displays all messages written in the C# script (with the command Debug.Log("my message") ;). In this tutorial, we won\'t be using it, so you can either remove the "Debug Overlay" game object from the scene, or disable it by unchecking it in the inspector (when you select "Debug Overlay" in the scene, uncheck the box to the left of "Debug Overlay" in the inspector). If you still wish to use it, you must define  for the game object "Debug Overlay" (in the Inspector), the rendering camera: drag the "GodViewPlayer/XR Origin (XR Rig)/Camera Offset/Main Camera" component into this attribute.'}),"\n",(0,n.jsx)("img",{src:"https://github.com/project-SIMPLE/simple.template.unity/blob/2024-06/ReadmeRes/TutorialDebugOverlay.png?raw=true",alt:"TutorialDebugOverlay",width:"1000"}),"\n",(0,n.jsx)(t.h2,{id:"godviewplayer",children:"GodViewPlayer"}),"\n",(0,n.jsx)(t.p,{children:'In this tutorial, we\'ll be using the GodViewPlayer game object to represent the player, which allows the player to move horizontally with the right joystick and vertically with the left. The first thing we\'ll do is define the player\'s initial vertical location. To do this, inspect the GodViewPlayer game object and change the position Y value to 200. We\'ll also change the movement speed to make it faster. In "GodViewPlayer/XR Origin (XR Rig)", set the "Move Vertical" script speed to 10 and the "Move Horizontal" script speed to 20 and the rotation speed to 10.'}),"\n",(0,n.jsx)("img",{src:"https://github.com/project-SIMPLE/simple.template.unity/blob/2024-06/ReadmeRes/TutorialGodViewPlayer.png?raw=true",alt:"TutorialGodViewPlayer",width:"1000"}),"\n",(0,n.jsx)(t.h2,{id:"test-of-the-model",children:"Test of the model"}),"\n",(0,n.jsx)(t.p,{children:"The model can be launched in different ways: from a headset/directly from unity in play mode - with/without middleware. The middleware makes it possible to manage multiple connections and in particular multi-player game. However, its use requires launching third-party software (middleware). As the objective of this tutorial is to launch a game with a single player, we will just use the direct connection to GAMA."}),"\n",(0,n.jsx)(t.p,{children:'We will see in the following two ways to launch the game: from Unity in play mode; from a VR headset. In all cases it will be necessary to launch the simulation from GAMA before, i.e. start the "vr_xp" experiment of model "traffic_model-VR.gaml".'}),"\n",(0,n.jsx)(t.h3,{id:"without-the-headset-debug-mode-and-without-the-middleware",children:"Without the headset (debug mode) and Without the middleware"}),"\n",(0,n.jsx)(t.p,{children:'Inspect the "Managers/Connection Manager" from the "Main Scene" and check the box "Desktop Mode".'}),"\n",(0,n.jsx)("img",{src:"https://github.com/project-SIMPLE/simple.template.unity/blob/2024-06/ReadmeRes/ConnectionManager.png?raw=true",alt:"ConnectionManager",width:"1000"}),"\n",(0,n.jsx)(t.p,{children:'You can now push on the "Play" button of Unity.'}),"\n",(0,n.jsx)(t.h3,{id:"with-the-headset-and-without-the-middleware",children:"With the headset and Without the middleware"}),"\n",(0,n.jsx)(t.p,{children:'Inspect the "Managers/Connection Manager" from the "Main Scene" and uncheck the box "Desktop Mode".'}),"\n",(0,n.jsx)(t.p,{children:'Open the 3 Scenes (Startup Menu, IP Menu and Main Scene) and connect the headset to the computer (and authorize the connection).\nIn the File Menu, choose "Build Setting". In this panel, select "Android" then click on "Switch platform". In the "Scene in Build" panel, be sure to have the three Scene (first, Startup Scene, then IP Menu and at last, Main Scene). Then, click on Build and Run.'}),"\n",(0,n.jsx)("img",{src:"https://github.com/project-SIMPLE/simple.template.unity/blob/2024-06/ReadmeRes/Build-setting.png?raw=true",alt:"Build-setting",width:"600"})]})}function c(e={}){const{wrapper:t}={...(0,a.RP)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,t,i)=>{i.d(t,{RP:()=>o});var n=i(6540);const a=n.createContext({});function o(e){const t=n.useContext(a);return n.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}}}]);